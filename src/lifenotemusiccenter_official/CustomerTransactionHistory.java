/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package lifenotemusiccenter_official;

import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Tharindu Munasinghe
 */
public class CustomerTransactionHistory extends javax.swing.JFrame {

    /**
     * Creates new form CustomerTransactionHistory
     */
    public CustomerTransactionHistory() {
        initComponents();
        SearchTransaction();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrp_Name_PurchaseID = new javax.swing.ButtonGroup();
        BG = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        JRB_CustomerName = new javax.swing.JRadioButton();
        JRB_PurchaseID = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        JCB_Month = new javax.swing.JComboBox();
        JCB_Date = new javax.swing.JComboBox();
        txtYear = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JtblTransactionHistory = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnPrintReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LNMC - Customer Transaction History");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BG.setBackground(new java.awt.Color(0, 0, 0));
        BG.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Orbitron", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Customer Transaction History");
        BG.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 7, 837, 50));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)), "Search & Filters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 204, 0)));
        jPanel1.setOpaque(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)), "By Customer Name / Purchase ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 204, 0)));
        jPanel2.setOpaque(false);

        jTextField1.setText("Enter Customer Name / Purchase ID");
        jTextField1.setEnabled(false);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        btngrp_Name_PurchaseID.add(JRB_CustomerName);
        JRB_CustomerName.setForeground(new java.awt.Color(255, 204, 0));
        JRB_CustomerName.setText("Customer Name");
        JRB_CustomerName.setOpaque(false);
        JRB_CustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRB_CustomerNameActionPerformed(evt);
            }
        });

        btngrp_Name_PurchaseID.add(JRB_PurchaseID);
        JRB_PurchaseID.setForeground(new java.awt.Color(255, 204, 0));
        JRB_PurchaseID.setText("Purchase ID");
        JRB_PurchaseID.setOpaque(false);
        JRB_PurchaseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRB_PurchaseIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JRB_CustomerName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(JRB_PurchaseID, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JRB_CustomerName)
                    .addComponent(JRB_PurchaseID))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)), "By Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 204, 0)));
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JCB_Month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Month:", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        JCB_Month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCB_MonthActionPerformed(evt);
            }
        });
        jPanel3.add(JCB_Month, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 68, -1));

        JCB_Date.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Date:", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jPanel3.add(JCB_Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 70, -1));

        txtYear.setText("Year:");
        jPanel3.add(txtYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 87, -1));

        jButton2.setBackground(new java.awt.Color(0, 255, 0));
        jButton2.setText("Arrange Table");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 290, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Required");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Required");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 16, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        BG.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 63, 600, 150));

        JtblTransactionHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Purchase ID", "Date & Time", "Total", "Payment Option", "Change", "Delivery", "Delivery Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JtblTransactionHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtblTransactionHistoryMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(JtblTransactionHistory);

        BG.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 817, 313));

        jButton1.setBackground(new java.awt.Color(0, 255, 0));
        jButton1.setText("Refresh Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        BG.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 71, 209, 39));

        btnPrintReport.setBackground(new java.awt.Color(255, 255, 0));
        btnPrintReport.setText("Print Full Report");
        btnPrintReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintReportActionPerformed(evt);
            }
        });
        BG.add(btnPrintReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 116, 209, -1));

        getContentPane().add(BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 550));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-853)/2, (screenSize.height-575)/2, 853, 575);
    }// </editor-fold>//GEN-END:initComponents

    private void JRB_CustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRB_CustomerNameActionPerformed
        if (JRB_CustomerName.isSelected()) {
            jTextField1.setEnabled(true);
            jTextField1.setEditable(true);
            jTextField1.setText("");
        } else {
            jTextField1.setEnabled(false);
            jTextField1.setText("Enter Customer Name / Purchase ID");
        }
    }//GEN-LAST:event_JRB_CustomerNameActionPerformed

    private void JRB_PurchaseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRB_PurchaseIDActionPerformed
        if (JRB_PurchaseID.isSelected()) {
            jTextField1.setEnabled(true);
            jTextField1.setEditable(true);
            jTextField1.setText("");
        } else {
            jTextField1.setEnabled(false);
            jTextField1.setText("Enter Customer Name / Purchase ID");
        }
    }//GEN-LAST:event_JRB_PurchaseIDActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if (JRB_CustomerName.isSelected()) {
            try {

                DefaultTableModel df = (DefaultTableModel) JtblTransactionHistory.getModel();
                String Search = "SELECT"
                                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                    + " FROM"
                                    + " customer"
                                    + " inner join purchase"
                                    + " on customer.`ID`= purchase.`customer_ID` where"
                        + " `customer`.`Name` = '" + jTextField1.getText() + "%'";

                ResultSet RSsearch = (ResultSet) MyConn.search(Search);
                df.setRowCount(0);
                while (RSsearch.next()) {
                    Vector v = new Vector();
                    v.add(RSsearch.getString("ID"));
                    v.add(RSsearch.getString("ID"));
                    v.add(RSsearch.getString("Date & Time"));
                    v.add(RSsearch.getString("Total"));
                    v.add(RSsearch.getString("Payment Option"));
                    v.add(RSsearch.getString("Change"));
                    v.add(RSsearch.getString("Delivery"));
                    v.add(RSsearch.getString("Delivery Payment"));
                    df.addRow(v);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (JRB_PurchaseID.isSelected()) {
            try {

                DefaultTableModel df = (DefaultTableModel) JtblTransactionHistory.getModel();
                String Search = "SELECT"
                                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                    + " FROM"
                                    + " customer"
                                    + " inner join purchase"
                                    + " on customer.`ID`= purchase.`customer_ID` where"
                        + " `purchase`.`ID` = '" + jTextField1.getText() + "%'";

                ResultSet RSsearch = (ResultSet) MyConn.search(Search);
                df.setRowCount(0);
                while (RSsearch.next()) {
                    Vector v = new Vector();
                    v.add(RSsearch.getString("ID"));
                    v.add(RSsearch.getString("ID"));
                    v.add(RSsearch.getString("Date & Time"));
                    v.add(RSsearch.getString("Total"));
                    v.add(RSsearch.getString("Payment Option"));
                    v.add(RSsearch.getString("Change"));
                    v.add(RSsearch.getString("Delivery"));
                    v.add(RSsearch.getString("Delivery Payment"));
                    df.addRow(v);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void btnPrintReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintReportActionPerformed
        JOptionPane.showMessageDialog(this, "The report will be consists by the current table values"
                + "\n" + "Do you wish to continue?",
                "For Your Information", JOptionPane.OK_CANCEL_OPTION);
        try {
            JasperReport report = JasperCompileManager.compileReport("CustomerTransactionReport.jrxml");
            DefaultTableModel df = (DefaultTableModel) JtblTransactionHistory.getModel();
            JasperPrint print = JasperFillManager.fillReport(report, null, new JRTableModelDataSource(df));
            JasperViewer.viewReport(print, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnPrintReportActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        SearchTransaction();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void JtblTransactionHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtblTransactionHistoryMouseClicked
        int row = JtblTransactionHistory.getSelectedRow();
    }//GEN-LAST:event_JtblTransactionHistoryMouseClicked

    private void JCB_MonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCB_MonthActionPerformed
        boolean mxd = JCB_Month.getSelectedIndex() == 1
                || JCB_Month.getSelectedIndex() == 3 || JCB_Month.getSelectedIndex()
                == 5 || JCB_Month.getSelectedIndex() == 7
                || JCB_Month.getSelectedIndex() == 8 || JCB_Month.getSelectedIndex()
                == 10 || JCB_Month.getSelectedIndex() == 12;
        boolean lxd =
                JCB_Month.getSelectedIndex() == 4 || JCB_Month.getSelectedIndex()
                == 6 || JCB_Month.getSelectedIndex() == 9
                || JCB_Month.getSelectedIndex() == 11;

        if (JCB_Month.getSelectedIndex() == 2) {
            JCB_Date.removeItemAt(31);
            JCB_Date.removeItemAt(30);
        } else if (lxd) {

            int a = JCB_Date.getItemCount() - 1;

            if (a == 29) {
                JCB_Date.addItem("30");
            } else if (a == 31) {
                JCB_Date.removeItemAt(31);
            }

        } else if (mxd) {

            int a = JCB_Date.getItemCount() - 1;

            if (a == 29) {
                JCB_Date.addItem("30");
                JCB_Date.addItem("31");
            } else if (a == 30) {
                JCB_Date.addItem("31");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Choose a month", "Month Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JCB_MonthActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int SelectMonth = JCB_Month.getSelectedIndex();
        int SelectDate = JCB_Date.getSelectedIndex();
        String year = txtYear.getText();
        DefaultTableModel df = (DefaultTableModel) JtblTransactionHistory.getModel();

        boolean month = SelectMonth == 0 || SelectMonth == -1;
        boolean date = SelectDate == 0 || SelectDate == -1;

        if (month) {
            JCB_Month.requestFocusInWindow();
            JOptionPane.showMessageDialog(this, "Select Month", "Month is not identified", JOptionPane.ERROR_MESSAGE);
        } else {
            if (date) {
                //no date given
                try {
                    //SelectMonth++;
                    if (SelectMonth > 9) {
                        String monthTitle = SelectMonth + "";

                        String Searching = year + "-" + monthTitle;
                        String monthsearch = "SELECT"
                                + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                + " FROM"
                                + " customer"
                                + " inner join purchase"
                                + " on customer.`ID`= purchase.`customer_ID`  where `Date and Time` like '" + Searching + "%'";
                        ResultSet rs = (ResultSet) MyConn.search(monthsearch);
                        df.setRowCount(0);
                        while (rs.next()) {
                            Vector v = new Vector();
                            v.add(rs.getString("ID"));
                            v.add(rs.getString("ID"));
                            v.add(rs.getString("Date & Time"));
                            v.add(rs.getString("Total"));
                            v.add(rs.getString("Payment Option"));
                            v.add(rs.getString("Change"));
                            v.add(rs.getString("Delivery"));
                            v.add(rs.getString("Delivery Payment"));
                            df.addRow(v);
                        }
                    } else {
                        String monthTitle = "0" + SelectMonth + "";

                        String Searching = year + "-" + monthTitle;
                        String monthsearch = "SELECT"
                                + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                + " FROM"
                                + " customer"
                                + " inner join purchase"
                                + " on customer.`ID`= purchase.`customer_ID` where `Date and Time` like '" + Searching + "%'";
                        ResultSet rs = (ResultSet) MyConn.search(monthsearch);
                        df.setRowCount(0);
                        while (rs.next()) {
                            Vector v = new Vector();
                            v.add(rs.getString("ID"));
                            v.add(rs.getString("ID"));
                            v.add(rs.getString("Date & Time"));
                            v.add(rs.getString("Total"));
                            v.add(rs.getString("Payment Option"));
                            v.add(rs.getString("Change"));
                            v.add(rs.getString("Delivery"));
                            v.add(rs.getString("Delivery Payment"));
                            df.addRow(v);
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                //when date was given
            } else {
                try {
                    String dateTitle = SelectDate + "";
                    if (SelectDate >= 10) {
                        if (SelectMonth >= 10) {
                            String monthTitle = SelectMonth + "";
                            String Searching = year + "-" + monthTitle + "-" + dateTitle;

                            String monthsearch = "SELECT"
                                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                    + " FROM"
                                    + " customer"
                                    + " inner join purchase"
                                    + " on customer.`ID`= purchase.`customer_ID` where `Date and Time` like '" + Searching + "%'";
                            ResultSet rs = (ResultSet) MyConn.search(monthsearch);
                            df.setRowCount(0);
                            while (rs.next()) {
                                Vector v = new Vector();
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("Date & Time"));
                                v.add(rs.getString("Total"));
                                v.add(rs.getString("Payment Option"));
                                v.add(rs.getString("Change"));
                                v.add(rs.getString("Delivery"));
                                v.add(rs.getString("Delivery Payment"));
                                df.addRow(v);
                            }
                        } else {
                            String monthTitle = "0" + SelectMonth + "";
                            String Searching = year + "-" + monthTitle + "-" + dateTitle;

                            String monthsearch = "SELECT"
                                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                    + " FROM"
                                    + " customer"
                                    + " inner join purchase"
                                    + " on customer.`ID`= purchase.`customer_ID` where `Date and Time` like '" + Searching + "%'";
                            ResultSet rs = (ResultSet) MyConn.search(monthsearch);
                            df.setRowCount(0);
                            while (rs.next()) {
                                Vector v = new Vector();
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("Date & Time"));
                                v.add(rs.getString("Total"));
                                v.add(rs.getString("Payment Option"));
                                v.add(rs.getString("Change"));
                                v.add(rs.getString("Delivery"));
                                v.add(rs.getString("Delivery Payment"));
                                df.addRow(v);
                            }
                        }
                    } else {
                        dateTitle = "0" + dateTitle + "";
                        if (SelectMonth > 9) {
                            String monthTitle = SelectMonth + "";
                            String Searching = year + "-" + monthTitle + "-" + dateTitle;

                            String monthsearch = "SELECT"
                                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                    + " FROM"
                                    + " customer"
                                    + " inner join purchase"
                                    + " on customer.`ID`= purchase.`customer_ID` where `Date and Time` like '" + Searching + "%'";
                            ResultSet rs = (ResultSet) MyConn.search(monthsearch);
                            df.setRowCount(0);
                            while (rs.next()) {
                                Vector v = new Vector();
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("Date & Time"));
                                v.add(rs.getString("Total"));
                                v.add(rs.getString("Payment Option"));
                                v.add(rs.getString("Change"));
                                v.add(rs.getString("Delivery"));
                                v.add(rs.getString("Delivery Payment"));
                                df.addRow(v);
                            }
                        } else {
                            String monthTitle = "0" + SelectMonth + "";
                            String Searching = year + "-" + monthTitle + "-" + dateTitle;

                            String monthsearch = "SELECT"
                                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                                    + " FROM"
                                    + " customer"
                                    + " inner join purchase"
                                    + " on customer.`ID`= purchase.`customer_ID` where `Date and Time` like '" + Searching + "%'";
                            ResultSet rs = (ResultSet) MyConn.search(monthsearch);
                            df.setRowCount(0);
                            while (rs.next()) {
                                Vector v = new Vector();
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("ID"));
                                v.add(rs.getString("Date & Time"));
                                v.add(rs.getString("Total"));
                                v.add(rs.getString("Payment Option"));
                                v.add(rs.getString("Change"));
                                v.add(rs.getString("Delivery"));
                                v.add(rs.getString("Delivery Payment"));
                                df.addRow(v);
                            }
                        }
                    }

                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerTransactionHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerTransactionHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerTransactionHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerTransactionHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CustomerTransactionHistory().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BG;
    private javax.swing.JComboBox JCB_Date;
    private javax.swing.JComboBox JCB_Month;
    private javax.swing.JRadioButton JRB_CustomerName;
    private javax.swing.JRadioButton JRB_PurchaseID;
    private javax.swing.JTable JtblTransactionHistory;
    private javax.swing.JButton btnPrintReport;
    private javax.swing.ButtonGroup btngrp_Name_PurchaseID;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void SearchTransaction() {
        try {
            DefaultTableModel df = (DefaultTableModel) JtblTransactionHistory.getModel();
            String Search = "SELECT"
                    + " `customer`.`ID`,`purchase`.`ID`,`purchase`.`Date & Time`"
                    + " ,`purchase`.`Total`,`purchase`.`Payment Option`,`purchase`.`Change`,"
                    + " `purchase`.`Delivery`,`purchase`.`Delivery Payment`"
                    + " FROM"
                    + " customer"
                    + " inner join purchase"
                    + " on customer.`ID`= purchase.`customer_ID`;";

            ResultSet RSsearch = (ResultSet) MyConn.search(Search);

            while (RSsearch.next()) {
                Vector v = new Vector();
                v.add(RSsearch.getString("ID"));
                v.add(RSsearch.getString("ID"));
                v.add(RSsearch.getString("Date & Time"));
                v.add(RSsearch.getString("Total"));
                v.add(RSsearch.getString("Payment Option"));
                v.add(RSsearch.getString("Change"));
                v.add(RSsearch.getString("Delivery"));
                v.add(RSsearch.getString("Delivery Payment"));
                df.addRow(v);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
}
